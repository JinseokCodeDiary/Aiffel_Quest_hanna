import 'dart:async';

void main(){
  // int workDuration = 25; // 작업시간 (분)
  // int shortBreakDuration = 5; // 짧은 휴식 시간(분)
  // int longBreakDuration  = 15; // 긴 휴식 시간(분)

  //test
  int workDuration = 3; // 작업시간 (분)
  int shortBreakDuration = 1; // 짧은 휴식 시간(분)
  int longBreakDuration  = 2; // 긴 휴식 시간(분)
  int cycle = 0; //사이클 카운트

  // Pomodoro 사이클을 시작하는 함수
  void startPomodoroCycle(){
    if(cycle < 4) {  // 4회차 이하인 경우
      print('Pomodoro 타이머를 시작합니다.'); 
      startTimer(workDuration,'작업시간이 끝났습니다.',(){
        cycle++; // 사이클 증가
        if(cycle < 4) {
          // 짧은 휴식 시간 시작
          print('짧은 휴식 시간을 시작합니다.');
          startTimer(shortBreakDuration,'짧은 휴식 시간이 끝났습니다.',startPomodoroCycle); 
        }else{
          // 긴 휴식 시간 시작
          print('긴 휴식 시간을 시작합니다.');
          startTimer(longBreakDuration ,'긴 휴식 시간이 끝났습니다.',() {
            cycle = 0;  // 사이클 초기화
            startPomodoroCycle();  // 새로운 사이클 시작
          }); 
        }
      });    
    }
  }
  // 초기 Pomodoro 사이클 시작
  startPomodoroCycle();
}

// 타이머를 시작하는 함수
// minutes: 타이머를 실행할 시간(분)
// message: 타이머 종료 시 출력할 메시지
// callback: 타이머 종료 시 호출할 콜백 함수
void startTimer(int minutes, String message, Function callback){
  int remainingTime = minutes * 60;
  // 매 초마다 타이머를 갱신하는 periodic 타이머 생성
  Timer.periodic(Duration(seconds: 1), (timer){
    // 남은 시간을 분과 초로 변환하여 출력
    if (remainingTime > 0){
      int minutesPart = remainingTime ~/ 60; // 60으로 정수 나눗셈(~/)을 하여 분 단위를 계산
      int secondsPart = remainingTime % 60;  // 60으로 나눈 나머지(%)를 계산하여 초 단위
      print('${minutesPart.toString().padLeft(2, '0')}:${secondsPart.toString().padLeft(2, '0')}'); 
      remainingTime--;  // 남은 시간 감소
    }else{
      timer.cancel();   // 타이머 종료
      print(message);   // 종료 메시지 출력
      callback(); // 콜백 함수 호출
    }
  });  
}
